{"title":"Blog","id":"blog","subheader":"Things I say","articles":[{"detailed":[""]},{"title":"Aww yis, a new blog!","description":"Isn't it shiny?","date":"2015-02-27","id":"firstcommit","detailed":["<p>Hello world, as they say.\n<br><br>\nI&#39;d like to give a big shoutout to <a href=\"http://gulpjs.com\">Gulp</a>, specifically because it&#39;s what compiles these blog posts from Markdown, but more generally because it&#39;s awesome.\n<br><br>\nI&#39;ll most likely be talking here about the various things I find, tricks I use, and of course, things I get up to. Feel free to read this, or don&#39;t. Yay for freedom.</p>\n"]},{"title":"Gettin' Googley","description":"Summer 2015","date":"2015-06-24","id":"googley","detailed":["<p>This summer (2015), I&#39;m working as a Software Engineering Intern at <a href=\"http://google.com\">Google!</a> What this means, in short, is that I spending a lot of time with the good people at Google, making sure that everything is Googley.\n<br><br>\nI&#39;ll stop using that word now.\n<br><br>\nMy building is in Los Angeles, so - once again - I&#39;m in LA for the summer!\n<br><br>\nThere may be more on this subject later... maybe. </p>\n"]},{"title":"Why I like ray tracing","description":"Mostly it's because of the pretty pictures...","date":"2015-07-28","id":"rendering","class":"auto-paragraph-spacing","detailed":["<p>I recently stumbled upon some <a href=\"\">very interesting literature</a> on ray tracing and other rendering techniques. I looked into it a bit; it turns out that there is a <a href=\"http://maverick.inria.fr/Publications/2005/CPPSS05/cerezo.pdf\">lot</a> of excellent research out there on the subject.</p>\n<p>After reading some more papers, including an <a href=\"http://maverick.inria.fr/Publications/2005/CPPSS05/cerezo.pdf\">excellent 2005 overview</a> of the state of rendering techniques, I&#39;ve concluded that a ray tracer is the perfect pet project, and here&#39;s why:</p>\n<p>A simple ray tracer is just that - simple, at least in theory. This makes it approachable.</p>\n<p><a href=\"https://www.youtube.com/watch?v=KYekhnLHGms\">Ray tracing</a> is a technique for converting a 3D scene into a 2D image. It basically involves simulating the path of a photon backwards from the camera position to the scene. When the virtual photons strike virtual objects in the scene, a set of physics equations are used to model the photon&#39;s path through space. Once it&#39;s path is determined, the task of rasterization simply involves mixing the radience and color of each point along the way - once again with an equation that models real life. A basic, funcitonal implementation that could render solid 3d objects is not too many hours of work away.</p>\n<p>While this process may be conceptually simple, the naive ray tracer is either be vastly simplified, or dreadfully slow, even when accelerated with GPU hardware.</p>\n<p>The complexity arises from attempting to render real world effects such as <a href=\"https://en.wikipedia.org/wiki/Scattering#Single_and_multiple_scattering\">multiple scattering</a> in <a href=\"http://www.cescg.org/CESCG-2000/SMaierhofer/node6.html\">participating media</a> (e.g. fog, smoke, etc), subsurface scattering, and much more. Once these are considered, a more complicated physics model is often required. Many more samples are required to converge on a solution, and each sample itself expensive to compute.</p>\n<p>The silver lining, is that <a href=\"http://www.cs.dartmouth.edu/~wjarosz/publications/dissertation/chapter7.pdf\">multiple</a> <a href=\"https://graphics.stanford.edu/courses/cs348b-03/papers/veach-chapter9.pdf\">distinct</a> <a href=\"http://www.cse.chalmers.se/edu/year/2011/course/TDA361_Computer_Graphics/grid.pdf\">methods</a> can be incrementally applied to optimize performance, and they can often be used in combination. If you&#39;re into that kind of thing, this can be quite satisfying.</p>\n<p>There are, in fact, <strong>many</strong> potential optimizations that one can apply: <a href=\"https://en.wikipedia.org/wiki/Bounding_volume_hierarchy\">fancy data structures</a>, Monte Carlo methods, heuristics, and many <a href=\"http://iquilezles.org/www/articles/hwinterpolation/hwinterpolation.htm\">other</a> <a href=\"https://en.wikipedia.org/wiki/Volumetric_path_tracing\">tricks</a>. Quite a few of the options have the interesting trait of being derived from nature - deeply understanding the phsyics of the situation allows us to optimize computations.</p>\n<p>While computer science can solve problems, math can eliminate problems before they need to be solved. Sometimes there&#39;s non-obvious closed form solutions problems to things one might otherwise approach with monte carlo estimation, for example. The problem of ray tracing <a href=\"https://inst.eecs.berkeley.edu/~cs294-13/fa09/lectures/scribe-lecture3.pdf\">provides plenty of opportunities</a> to get deep into the math, for practical reasons, if you&#39;re into that kind of thing.</p>\n<p>The education value doesn&#39;t stop there; this gives an excellent opportunity to learn more about concurrency, and GPU programming - areas of increasing importance.</p>\n<p>Of course, let&#39;s not forget the most important part! Creating a ray tracing engine means that you get to play with it! There are endless, mindblowing uses for ray tracing engines, ranging from proceedural generation and 3d fractals to rendering physical phenomenon like <a href=\"http://rantonels.github.io/starless/\">black holes</a> or cloud nebulas.</p>\n<p>Proceedural generation is a huge goldmine of possiblities, as made astonishingly evident by <a href=\"http://sub.blue/fractal-lab\">Tom Beddard&#39;s work with ray marching fractals.</a> Generated worlds can be virtually navigated with the ray tracing engine. Interactive speeds can be attained by progressively rendering scenes, accelerated with GPUs. Computationally expensive techniques can be used on-demand to create high resolution renders of interesting perspectives.</p>\n<p>To wrap it up... If you&#39;re looking for an interesting pet project, want to learn a new language, or just want to learn about algorithms, you may want to look into rendering algorithms.</p>\n"]}]}